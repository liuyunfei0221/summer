<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--suppress SqlNoDataSourceInspection, SqlDialectInspection -->
<mapper namespace="com.blue.member.repository.mapper.MemberBasicMapper">

    <resultMap id="BaseResultMap" type="com.blue.member.repository.entity.MemberBasic">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="phone" jdbcType="VARCHAR" property="phone"
                typeHandler="com.blue.member.repository.type.SecretStringTypeHandler"/>
        <result column="email" jdbcType="VARCHAR" property="email"
                typeHandler="com.blue.member.repository.type.SecretStringTypeHandler"/>
        <result column="password" jdbcType="VARCHAR" property="password"/>
        <result column="name" jdbcType="VARCHAR" property="name"
                typeHandler="com.blue.member.repository.type.SecretStringTypeHandler"/>
        <result column="icon" jdbcType="VARCHAR" property="icon"/>
        <result column="gender" jdbcType="TINYINT" property="gender"/>
        <result column="status" jdbcType="TINYINT" property="status"/>
        <result column="create_time" jdbcType="BIGINT" property="createTime"/>
        <result column="update_time" jdbcType="BIGINT" property="updateTime"/>
    </resultMap>

    <sql id="Base_Column_List">
        id
        , phone, email, password, name, icon, gender, status, create_time, update_time
    </sql>

    <insert id="insert" parameterType="com.blue.member.repository.entity.MemberBasic">
        insert into member_basic (id, phone,
                                  email, password, name,
                                  icon, gender, status,
                                  create_time, update_time)
        values (#{id,jdbcType=BIGINT},
                #{phone,jdbcType=VARCHAR,typeHandler=com.blue.member.repository.type.SecretStringTypeHandler},
                #{email,jdbcType=VARCHAR,typeHandler=com.blue.member.repository.type.SecretStringTypeHandler},
                #{password,jdbcType=VARCHAR},
                #{name,jdbcType=VARCHAR,typeHandler=com.blue.member.repository.type.SecretStringTypeHandler},
                #{icon,jdbcType=VARCHAR}, #{gender,jdbcType=TINYINT}, #{status,jdbcType=TINYINT},
                #{createTime,jdbcType=BIGINT}, #{updateTime,jdbcType=BIGINT})
    </insert>

    <insert id="insertSelective" parameterType="com.blue.member.repository.entity.MemberBasic">
        insert into member_basic
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="phone != null">
                phone,
            </if>
            <if test="email != null">
                email,
            </if>
            <if test="password != null">
                password,
            </if>
            <if test="name != null">
                name,
            </if>
            <if test="icon != null">
                icon,
            </if>
            <if test="gender != null">
                gender,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            <if test="phone != null">
                #{phone,jdbcType=VARCHAR,typeHandler=com.blue.member.repository.type.SecretStringTypeHandler},
            </if>
            <if test="email != null">
                #{email,jdbcType=VARCHAR,typeHandler=com.blue.member.repository.type.SecretStringTypeHandler},
            </if>
            <if test="password != null">
                #{password,jdbcType=VARCHAR},
            </if>
            <if test="name != null">
                #{name,jdbcType=VARCHAR,typeHandler=com.blue.member.repository.type.SecretStringTypeHandler},
            </if>
            <if test="icon != null">
                #{icon,jdbcType=VARCHAR},
            </if>
            <if test="gender != null">
                #{gender,jdbcType=TINYINT},
            </if>
            <if test="status != null">
                #{status,jdbcType=TINYINT},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=BIGINT},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=BIGINT},
            </if>
        </trim>
    </insert>

    <update id="updateByPrimaryKeySelective" parameterType="com.blue.member.repository.entity.MemberBasic">
        update member_basic
        <set>
            <if test="phone != null">
                phone = #{phone,jdbcType=VARCHAR,typeHandler=com.blue.member.repository.type.SecretStringTypeHandler},
            </if>
            <if test="email != null">
                email = #{email,jdbcType=VARCHAR,typeHandler=com.blue.member.repository.type.SecretStringTypeHandler},
            </if>
            <if test="password != null">
                password = #{password,jdbcType=VARCHAR},
            </if>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR,typeHandler=com.blue.member.repository.type.SecretStringTypeHandler},
            </if>
            <if test="icon != null">
                icon = #{icon,jdbcType=VARCHAR},
            </if>
            <if test="gender != null">
                gender = #{gender,jdbcType=TINYINT},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=TINYINT},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=BIGINT},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=BIGINT},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>

    <update id="updateByPrimaryKey" parameterType="com.blue.member.repository.entity.MemberBasic">
        update member_basic
        set phone       = #{phone,jdbcType=VARCHAR,typeHandler=com.blue.member.repository.type.SecretStringTypeHandler},
            email       = #{email,jdbcType=VARCHAR,typeHandler=com.blue.member.repository.type.SecretStringTypeHandler},
            password    = #{password,jdbcType=VARCHAR},
            name        = #{name,jdbcType=VARCHAR,typeHandler=com.blue.member.repository.type.SecretStringTypeHandler},
            icon        = #{icon,jdbcType=VARCHAR},
            gender      = #{gender,jdbcType=TINYINT},
            status      = #{status,jdbcType=TINYINT},
            create_time = #{createTime,jdbcType=BIGINT},
            update_time = #{updateTime,jdbcType=BIGINT}
        where id = #{id,jdbcType=BIGINT}
    </update>

    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from member_basic
        where id = #{id,jdbcType=BIGINT}
    </select>

    <select id="getByPhone" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM
        member_basic FORCE INDEX(idx_phone)
        WHERE
        `phone` = #{phone,jdbcType=VARCHAR,typeHandler=com.blue.member.repository.type.SecretStringTypeHandler}
    </select>

    <select id="getByEmail" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM
        member_basic FORCE INDEX(idx_email)
        WHERE
        `email` = #{email,jdbcType=VARCHAR,typeHandler=com.blue.member.repository.type.SecretStringTypeHandler}
    </select>

    <select id="getByName" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM
        member_basic FORCE INDEX(idx_name)
        WHERE
        `name` = #{name,jdbcType=VARCHAR,typeHandler=com.blue.member.repository.type.SecretStringTypeHandler}
    </select>

    <select id="select" resultMap="BaseResultMap" parameterType="com.blue.member.model.MemberCondition">
        SELECT
        <include refid="Base_Column_List"/>
        FROM
        member_basic
    </select>

    <select id="selectByIds" resultMap="BaseResultMap">
        <if test="ids != null and ids.size > 0">
            SELECT
            <include refid="Base_Column_List"/>
            FROM
            member_basic
            WHERE
            id IN
            <foreach collection="ids" open="(" close=")" separator="," item="id" index="index">
                #{id,jdbcType=BIGINT}
            </foreach>
        </if>
    </select>

    <sql id="Member_Conditions">
        <if test="memberCondition != null">
            <where>
                <if test="memberCondition.id != null">
                    AND
                    id = #{memberCondition.id,jdbcType=BIGINT}
                </if>
                <if test="memberCondition.phone != null">
                    AND
                    phone =
                    #{memberCondition.phone,jdbcType=VARCHAR,typeHandler=com.blue.member.repository.type.SecretStringTypeHandler}
                </if>
                <if test="memberCondition.email != null">
                    AND
                    email =
                    #{memberCondition.email,jdbcType=VARCHAR,typeHandler=com.blue.member.repository.type.SecretStringTypeHandler}
                </if>
                <if test="memberCondition.name != null">
                    AND
                    name =
                    #{memberCondition.name,jdbcType=VARCHAR,typeHandler=com.blue.member.repository.type.SecretStringTypeHandler}
                </if>
                <if test="memberCondition.icon != null">
                    AND
                    icon = #{memberCondition.icon,jdbcType=VARCHAR}
                </if>
                <if test="memberCondition.gender != null">
                    AND
                    gender = #{memberCondition.gender,jdbcType=TINYINT}
                </if>
                <if test="memberCondition.status != null">
                    AND
                    status = #{memberCondition.status,jdbcType=TINYINT}
                </if>
                <if test="memberCondition.createTimeBegin != null">
                    AND
                    create_time &gt;= #{memberCondition.createTimeBegin,jdbcType=BIGINT}
                </if>
                <if test="memberCondition.createTimeEnd != null">
                    AND
                    create_time &lt;= #{memberCondition.createTimeEnd,jdbcType=BIGINT}
                </if>
                <if test="memberCondition.updateTimeBegin != null">
                    AND
                    update_time &gt;= #{memberCondition.updateTimeBegin,jdbcType=BIGINT}
                </if>
                <if test="memberCondition.updateTimeEnd != null">
                    AND
                    update_time &lt;= #{memberCondition.updateTimeEnd,jdbcType=BIGINT}
                </if>
            </where>
        </if>
    </sql>

    <select id="selectByLimitAndCondition" resultMap="BaseResultMap"
            parameterType="com.blue.member.model.MemberCondition">
        <if test="limit != null and limit >= 0 and rows != null and rows > 0">
            SELECT
            <include refid="Base_Column_List"/>
            FROM
            member_basic
            <include refid="Member_Conditions"/>
            <if test="memberCondition.sortAttribute != null and memberCondition.sortAttribute != '' and memberCondition.sortType != null and memberCondition.sortType != ''">
                ORDER BY
                ${memberCondition.sortAttribute,jdbcType=VARCHAR} ${memberCondition.sortType,jdbcType=VARCHAR}
            </if>
            LIMIT #{limit,jdbcType=BIGINT},#{rows,jdbcType=BIGINT}
        </if>
    </select>

    <select id="countByCondition" resultType="java.lang.Long"
            parameterType="com.blue.member.model.MemberCondition">
        SELECT COUNT(*)
        FROM
        member_basic
        <include refid="Member_Conditions"/>
    </select>

</mapper>