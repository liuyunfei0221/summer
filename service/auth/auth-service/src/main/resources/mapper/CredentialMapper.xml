<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--suppress SqlNoDataSourceInspection, SqlDialectInspection -->
<mapper namespace="com.blue.auth.repository.mapper.CredentialMapper">
    <resultMap id="BaseResultMap" type="com.blue.auth.repository.entity.Credential">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="credential" jdbcType="VARCHAR" property="credential"
                typeHandler="com.blue.database.type.EncodeStringTypeHandler"/>
        <result column="type" jdbcType="VARCHAR" property="type"/>
        <result column="access" jdbcType="VARCHAR" property="access"/>
        <result column="member_id" jdbcType="BIGINT" property="memberId"/>
        <result column="extra" jdbcType="VARCHAR" property="extra"
                typeHandler="com.blue.database.type.EncodeStringTypeHandler"/>
        <result column="status" jdbcType="TINYINT" property="status"/>
        <result column="create_time" jdbcType="BIGINT" property="createTime"/>
        <result column="update_time" jdbcType="BIGINT" property="updateTime"/>
    </resultMap>

    <sql id="Base_Column_List">
        id
        , credential, type, access, member_id, extra, status, create_time, update_time
    </sql>

    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from credential
        where id = #{id,jdbcType=BIGINT}
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        delete
        from credential
        where id = #{id,jdbcType=BIGINT}
    </delete>

    <insert id="insert" parameterType="com.blue.auth.repository.entity.Credential">
        insert into credential (id, credential, type,
                                access, member_id, extra,
                                status, create_time, update_time)
        values (#{id,jdbcType=BIGINT},
                #{credential,jdbcType=VARCHAR,typeHandler=com.blue.database.type.EncodeStringTypeHandler},
                #{type,jdbcType=VARCHAR},
                #{access,jdbcType=VARCHAR}, #{memberId,jdbcType=BIGINT},
                #{extra,jdbcType=VARCHAR,typeHandler=com.blue.database.type.EncodeStringTypeHandler},
                #{status,jdbcType=TINYINT}, #{createTime,jdbcType=BIGINT}, #{updateTime,jdbcType=BIGINT})
    </insert>

    <insert id="insertSelective" parameterType="com.blue.auth.repository.entity.Credential">
        insert into credential
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="credential != null">
                credential,
            </if>
            <if test="type != null">
                type,
            </if>
            <if test="access != null">
                access,
            </if>
            <if test="memberId != null">
                member_id,
            </if>
            <if test="extra != null">
                extra,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            <if test="credential != null">
                #{credential,jdbcType=VARCHAR,typeHandler=com.blue.database.type.EncodeStringTypeHandler},
            </if>
            <if test="type != null">
                #{type,jdbcType=VARCHAR},
            </if>
            <if test="access != null">
                #{access,jdbcType=VARCHAR},
            </if>
            <if test="memberId != null">
                #{memberId,jdbcType=BIGINT},
            </if>
            <if test="extra != null">
                #{extra,jdbcType=VARCHAR,typeHandler=com.blue.database.type.EncodeStringTypeHandler},
            </if>
            <if test="status != null">
                #{status,jdbcType=TINYINT},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=BIGINT},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=BIGINT},
            </if>
        </trim>
    </insert>

    <update id="updateByPrimaryKeySelective" parameterType="com.blue.auth.repository.entity.Credential">
        update credential
        <set>
            <if test="credential != null">
                credential = #{credential,jdbcType=VARCHAR,typeHandler=com.blue.database.type.EncodeStringTypeHandler},
            </if>
            <if test="type != null">
                type = #{type,jdbcType=VARCHAR},
            </if>
            <if test="access != null">
                access = #{access,jdbcType=VARCHAR},
            </if>
            <if test="memberId != null">
                member_id = #{memberId,jdbcType=BIGINT},
            </if>
            <if test="extra != null">
                extra = #{extra,jdbcType=VARCHAR,typeHandler=com.blue.database.type.EncodeStringTypeHandler},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=TINYINT},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=BIGINT},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=BIGINT},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>

    <update id="updateByPrimaryKey" parameterType="com.blue.auth.repository.entity.Credential">
        update credential
        set credential  = #{credential,jdbcType=VARCHAR,typeHandler=com.blue.database.type.EncodeStringTypeHandler},
            type        = #{type,jdbcType=VARCHAR},
            access      = #{access,jdbcType=VARCHAR},
            member_id   = #{memberId,jdbcType=BIGINT},
            extra       = #{extra,jdbcType=VARCHAR,typeHandler=com.blue.database.type.EncodeStringTypeHandler},
            status      = #{status,jdbcType=TINYINT},
            create_time = #{createTime,jdbcType=BIGINT},
            update_time = #{updateTime,jdbcType=BIGINT}
        where id = #{id,jdbcType=BIGINT}
    </update>

    <select id="getByCredentialAndType" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM
        credential FORCE INDEX(idx_credential_type_access_member)
        WHERE
        credential = #{credential,jdbcType=VARCHAR,typeHandler=com.blue.database.type.EncodeStringTypeHandler}
        AND
        type = #{type,jdbcType=VARCHAR}
        LIMIT 1;
    </select>

    <select id="selectByCredentialAndTypes" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM
        credential FORCE INDEX(idx_credential_type_access_member)
        WHERE
        credential = #{credential,jdbcType=VARCHAR,typeHandler=com.blue.database.type.EncodeStringTypeHandler}
        AND
        type IN
        <foreach collection="types" open="(" close=")" separator="," item="type" index="index">
            type = #{type,jdbcType=VARCHAR}
        </foreach>
    </select>

    <select id="getByMemberIdAndType" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM
        credential FORCE INDEX(idx_member_type)
        WHERE
        member_id = #{memberId,jdbcType=BIGINT}
        AND
        type = #{type,jdbcType=VARCHAR}
        LIMIT 1;
    </select>

    <select id="selectByMemberIdAndTypes" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM
        credential FORCE INDEX(idx_member_type)
        WHERE
        member_id = #{memberId,jdbcType=BIGINT}
        AND
        type IN
        <foreach collection="types" open="(" close=")" separator="," item="type" index="index">
            type = #{type,jdbcType=VARCHAR}
        </foreach>
    </select>

    <select id="selectByMemberId" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM
        credential FORCE INDEX(idx_member_type)
        WHERE
        member_id = #{memberId,jdbcType=BIGINT}
    </select>

    <select id="selectByMemberIds" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM
        credential FORCE INDEX(idx_member_type)
        WHERE
        member_id IN
        <foreach collection="memberIds" open="(" close=")" separator="," item="memberId" index="index">
            #{memberId,jdbcType=BIGINT}
        </foreach>
    </select>

    <select id="selectByCredentials" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM
        credential FORCE INDEX(idx_member_type)
        WHERE
        credential IN
        <foreach collection="credentials" open="(" close=")" separator="," item="credential" index="index">
            #{credential,jdbcType=VARCHAR,typeHandler=com.blue.database.type.EncodeStringTypeHandler}
        </foreach>
    </select>

    <insert id="insertBatch" parameterType="java.util.List">
        <if test="list != null and list.size > 0">
            INSERT INTO credential (
            <include refid="Base_Column_List"/>
            ) values
            <foreach collection="list" index="index" item="item" separator=",">
                (
                #{item.id,jdbcType=BIGINT},
                #{item.credential,jdbcType=VARCHAR,typeHandler=com.blue.database.type.EncodeStringTypeHandler},
                #{item.type,jdbcType=VARCHAR},
                #{item.access,jdbcType=VARCHAR},
                #{item.memberId,jdbcType=BIGINT},
                #{item.extra,jdbcType=VARCHAR,typeHandler=com.blue.database.type.EncodeStringTypeHandler},
                #{item.status,jdbcType=TINYINT},
                #{item.createTime,jdbcType=BIGINT},
                #{item.updateTime,jdbcType=BIGINT}
                )
            </foreach>
        </if>
    </insert>

    <update id="updateAccessByMemberAndTypes">
        <if test="memberId != null and memberId >0 and credentialTypes != null and credentialTypes.size > 0 and access != null and access != ''">
            UPDATE credential
            SET access = #{access,jdbcType=VARCHAR}
            WHERE member_id = #{memberId,jdbcType=BIGINT}
            AND
            type IN
            <foreach collection="credentialTypes" open="(" close=")" separator="," item="type" index="index">
                #{type,jdbcType=VARCHAR}
            </foreach>
        </if>
    </update>

</mapper>