<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--suppress SqlNoDataSourceInspection, SqlDialectInspection -->
<mapper namespace="com.blue.business.repository.mapper.ReplyMapper">

    <resultMap id="BaseResultMap" type="com.blue.business.repository.entity.Reply">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="sub_id" jdbcType="BIGINT" property="subId"/>
        <result column="sub_type" jdbcType="TINYINT" property="subType"/>
        <result column="sub_author_id" jdbcType="BIGINT" property="subAuthorId"/>
        <result column="comment_id" jdbcType="BIGINT" property="commentId"/>
        <result column="from_id" jdbcType="BIGINT" property="fromId"/>
        <result column="to_id" jdbcType="BIGINT" property="toId"/>
        <result column="type" jdbcType="TINYINT" property="type"/>
        <result column="favorites" jdbcType="BIGINT" property="favorites"/>
        <result column="likes" jdbcType="BIGINT" property="likes"/>
        <result column="boring" jdbcType="BIGINT" property="boring"/>
        <result column="status" jdbcType="TINYINT" property="status"/>
        <result column="create_time" jdbcType="BIGINT" property="createTime"/>
    </resultMap>

    <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.blue.business.repository.entity.Reply">
        <result column="content" jdbcType="LONGVARCHAR" property="content"/>
    </resultMap>

    <sql id="Base_Column_List">
        id
        , sub_id, sub_type, sub_author_id, comment_id, from_id, to_id, type, favorites,
    likes, boring, status, create_time
    </sql>

    <sql id="Blob_Column_List">
        content
    </sql>

    <insert id="insert" parameterType="com.blue.business.repository.entity.Reply">
        insert into reply (id, sub_id, sub_type,
                           sub_author_id, comment_id, from_id,
                           to_id, type, favorites,
                           likes, boring, status,
                           create_time, content)
        values (#{id,jdbcType=BIGINT}, #{subId,jdbcType=BIGINT}, #{subType,jdbcType=TINYINT},
                #{subAuthorId,jdbcType=BIGINT}, #{commentId,jdbcType=BIGINT}, #{fromId,jdbcType=BIGINT},
                #{toId,jdbcType=BIGINT}, #{type,jdbcType=TINYINT}, #{favorites,jdbcType=BIGINT},
                #{likes,jdbcType=BIGINT}, #{boring,jdbcType=BIGINT}, #{status,jdbcType=TINYINT},
                #{createTime,jdbcType=BIGINT}, #{content,jdbcType=LONGVARCHAR})
    </insert>

    <insert id="insertSelective" parameterType="com.blue.business.repository.entity.Reply">
        insert into reply
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="subId != null">
                sub_id,
            </if>
            <if test="subType != null">
                sub_type,
            </if>
            <if test="subAuthorId != null">
                sub_author_id,
            </if>
            <if test="commentId != null">
                comment_id,
            </if>
            <if test="fromId != null">
                from_id,
            </if>
            <if test="toId != null">
                to_id,
            </if>
            <if test="type != null">
                type,
            </if>
            <if test="favorites != null">
                favorites,
            </if>
            <if test="likes != null">
                likes,
            </if>
            <if test="boring != null">
                boring,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="content != null">
                content,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            <if test="subId != null">
                #{subId,jdbcType=BIGINT},
            </if>
            <if test="subType != null">
                #{subType,jdbcType=TINYINT},
            </if>
            <if test="subAuthorId != null">
                #{subAuthorId,jdbcType=BIGINT},
            </if>
            <if test="commentId != null">
                #{commentId,jdbcType=BIGINT},
            </if>
            <if test="fromId != null">
                #{fromId,jdbcType=BIGINT},
            </if>
            <if test="toId != null">
                #{toId,jdbcType=BIGINT},
            </if>
            <if test="type != null">
                #{type,jdbcType=TINYINT},
            </if>
            <if test="favorites != null">
                #{favorites,jdbcType=BIGINT},
            </if>
            <if test="likes != null">
                #{likes,jdbcType=BIGINT},
            </if>
            <if test="boring != null">
                #{boring,jdbcType=BIGINT},
            </if>
            <if test="status != null">
                #{status,jdbcType=TINYINT},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=BIGINT},
            </if>
            <if test="content != null">
                #{content,jdbcType=LONGVARCHAR},
            </if>
        </trim>
    </insert>

    <update id="updateByPrimaryKey" parameterType="com.blue.business.repository.entity.Reply">
        update reply
        set sub_id        = #{subId,jdbcType=BIGINT},
            sub_type      = #{subType,jdbcType=TINYINT},
            sub_author_id = #{subAuthorId,jdbcType=BIGINT},
            comment_id    = #{commentId,jdbcType=BIGINT},
            from_id       = #{fromId,jdbcType=BIGINT},
            to_id         = #{toId,jdbcType=BIGINT},
            type          = #{type,jdbcType=TINYINT},
            favorites     = #{favorites,jdbcType=BIGINT},
            likes         = #{likes,jdbcType=BIGINT},
            boring        = #{boring,jdbcType=BIGINT},
            status        = #{status,jdbcType=TINYINT},
            create_time   = #{createTime,jdbcType=BIGINT}
        where id = #{id,jdbcType=BIGINT}
    </update>

    <update id="updateByPrimaryKeySelective" parameterType="com.blue.business.repository.entity.Reply">
        update reply
        <set>
            <if test="subId != null">
                sub_id = #{subId,jdbcType=BIGINT},
            </if>
            <if test="subType != null">
                sub_type = #{subType,jdbcType=TINYINT},
            </if>
            <if test="subAuthorId != null">
                sub_author_id = #{subAuthorId,jdbcType=BIGINT},
            </if>
            <if test="commentId != null">
                comment_id = #{commentId,jdbcType=BIGINT},
            </if>
            <if test="fromId != null">
                from_id = #{fromId,jdbcType=BIGINT},
            </if>
            <if test="toId != null">
                to_id = #{toId,jdbcType=BIGINT},
            </if>
            <if test="type != null">
                type = #{type,jdbcType=TINYINT},
            </if>
            <if test="favorites != null">
                favorites = #{favorites,jdbcType=BIGINT},
            </if>
            <if test="likes != null">
                likes = #{likes,jdbcType=BIGINT},
            </if>
            <if test="boring != null">
                boring = #{boring,jdbcType=BIGINT},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=TINYINT},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=BIGINT},
            </if>
            <if test="content != null">
                content = #{content,jdbcType=LONGVARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>

    <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.blue.business.repository.entity.Reply">
        update reply
        set sub_id        = #{subId,jdbcType=BIGINT},
            sub_type      = #{subType,jdbcType=TINYINT},
            sub_author_id = #{subAuthorId,jdbcType=BIGINT},
            comment_id    = #{commentId,jdbcType=BIGINT},
            from_id       = #{fromId,jdbcType=BIGINT},
            to_id         = #{toId,jdbcType=BIGINT},
            type          = #{type,jdbcType=TINYINT},
            favorites     = #{favorites,jdbcType=BIGINT},
            likes         = #{likes,jdbcType=BIGINT},
            boring        = #{boring,jdbcType=BIGINT},
            status        = #{status,jdbcType=TINYINT},
            create_time   = #{createTime,jdbcType=BIGINT},
            content       = #{content,jdbcType=LONGVARCHAR}
        where id = #{id,jdbcType=BIGINT}
    </update>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        delete
        from reply
        where id = #{id,jdbcType=BIGINT}
    </delete>

    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from reply
        where id = #{id,jdbcType=BIGINT}
    </select>

</mapper>