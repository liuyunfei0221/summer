<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--suppress SqlNoDataSourceInspection, SqlDialectInspection -->
<mapper namespace="com.blue.lake.repository.mapper.OptEventMapper">
    <resultMap id="BaseResultMap" type="com.blue.lake.repository.entity.OptEvent">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="data_event_type" jdbcType="VARCHAR" property="dataEventType"/>
        <result column="data_event_op_type" jdbcType="VARCHAR" property="dataEventOpType"/>
        <result column="stamp" jdbcType="BIGINT" property="stamp"/>
        <result column="create_date" jdbcType="VARCHAR" property="createDate"/>
        <result column="method" jdbcType="VARCHAR" property="method"/>
        <result column="uri" jdbcType="VARCHAR" property="uri"/>
        <result column="real_uri" jdbcType="VARCHAR" property="realUri"/>
        <result column="request_body" jdbcType="VARCHAR" property="requestBody"/>
        <result column="request_extra" jdbcType="VARCHAR" property="requestExtra"/>
        <result column="response_status" jdbcType="INTEGER" property="responseStatus"/>
        <result column="response_body" jdbcType="VARCHAR" property="responseBody"/>
        <result column="response_extra" jdbcType="VARCHAR" property="responseExtra"/>
        <result column="request_id" jdbcType="VARCHAR" property="requestId"/>
        <result column="metadata" jdbcType="VARCHAR" property="metadata"/>
        <result column="jwt" jdbcType="VARCHAR" property="jwt"/>
        <result column="member_id" jdbcType="BIGINT" property="memberId"/>
        <result column="role_ids" jdbcType="ARRAY" property="roleIds"
                typeHandler="com.blue.lake.repository.type.ClickHouseLongArrayTypeHandler"/>
        <result column="credential_type" jdbcType="VARCHAR" property="credentialType"/>
        <result column="device_type" jdbcType="VARCHAR" property="deviceType"/>
        <result column="login_time" jdbcType="BIGINT" property="loginTime"/>
        <result column="client_ip" jdbcType="VARCHAR" property="clientIp"/>
        <result column="user_agent" jdbcType="VARCHAR" property="userAgent"/>
        <result column="sec_key" jdbcType="VARCHAR" property="secKey"/>
        <result column="request_un_decryption" jdbcType="INTEGER" property="requestUnDecryption"/>
        <result column="response_un_encryption" jdbcType="INTEGER" property="responseUnEncryption"/>
        <result column="existence_request_body" jdbcType="INTEGER" property="existenceRequestBody"/>
        <result column="existence_response_body" jdbcType="INTEGER" property="existenceResponseBody"/>
        <result column="duration_seconds" jdbcType="INTEGER" property="durationSeconds"/>
        <result column="resource_id" jdbcType="BIGINT" property="resourceId"/>
        <result column="service" jdbcType="VARCHAR" property="service"/>
        <result column="relative_uri" jdbcType="VARCHAR" property="relativeUri"/>
        <result column="absolute_uri" jdbcType="VARCHAR" property="absoluteUri"/>
        <result column="relation_view" jdbcType="VARCHAR" property="relationView"/>
        <result column="authenticate" jdbcType="INTEGER" property="authenticate"/>
        <result column="type" jdbcType="INTEGER" property="type"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
    </resultMap>

    <sql id="Base_Column_List">
        id
        , data_event_type, data_event_op_type, stamp, create_date, method, uri, real_uri, request_body, request_extra, response_status, response_body, response_extra, request_id, metadata, jwt, member_id,
        role_ids, credential_type, device_type, login_time, client_ip, user_agent, sec_key, request_un_decryption, response_un_encryption, existence_request_body, existence_response_body, duration_seconds,
        resource_id, service, relative_uri, absolute_uri, relation_view, authenticate, type, name
    </sql>

    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from opt_event
        where id = #{id,jdbcType=BIGINT}
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        delete
        from opt_event
        where id = #{id,jdbcType=BIGINT}
    </delete>

    <insert id="insert" parameterType="com.blue.lake.repository.entity.OptEvent">
        insert into opt_event (
        <include refid="Base_Column_List"/>
        )
        values
        (#{id,jdbcType=BIGINT}, #{dataEventType,jdbcType=VARCHAR},
        #{dataEventOpType,jdbcType=VARCHAR}, #{stamp,jdbcType=BIGINT},
        #{createDate,jdbcType=VARCHAR}, #{method,jdbcType=VARCHAR},
        #{uri,jdbcType=VARCHAR}, #{realUri,jdbcType=VARCHAR},
        #{requestBody,jdbcType=VARCHAR}, #{requestExtra,jdbcType=VARCHAR},
        #{responseStatus,jdbcType=INTEGER}, #{responseBody,jdbcType=VARCHAR},
        #{responseExtra,jdbcType=VARCHAR}, #{requestId,jdbcType=VARCHAR}, #{metadata,jdbcType=VARCHAR},
        #{jwt,jdbcType=VARCHAR}, #{memberId,jdbcType=BIGINT},
        #{roleIds,jdbcType=ARRAY,typeHandler=com.blue.lake.repository.type.ClickHouseLongArrayTypeHandler},
        #{credentialType,jdbcType=VARCHAR}, #{deviceType,jdbcType=VARCHAR},
        #{loginTime,jdbcType=BIGINT}, #{clientIp,jdbcType=VARCHAR}, #{userAgent,jdbcType=VARCHAR},
        #{secKey,jdbcType=VARCHAR}, #{requestUnDecryption,jdbcType=INTEGER},
        #{responseUnEncryption,jdbcType=INTEGER}, #{existenceRequestBody,jdbcType=INTEGER},
        #{existenceResponseBody,jdbcType=INTEGER}, #{durationSeconds,jdbcType=INTEGER},
        #{resourceId,jdbcType=BIGINT}, #{service,jdbcType=VARCHAR},
        #{relativeUri,jdbcType=VARCHAR}, #{absoluteUri,jdbcType=VARCHAR},
        #{relationView,jdbcType=VARCHAR}, #{authenticate,jdbcType=INTEGER},
        #{type,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR})
    </insert>

    <insert id="insertBatch" parameterType="java.util.List">
        <if test="list != null and list.size > 0">
            INSERT INTO opt_event (
            <include refid="Base_Column_List"/>
            ) values
            <foreach collection="list" index="index" item="item" separator=",">
                (#{item.id,jdbcType=BIGINT}, #{item.dataEventType,jdbcType=VARCHAR},
                #{item.dataEventOpType,jdbcType=VARCHAR}, #{item.stamp,jdbcType=BIGINT},
                #{item.createDate,jdbcType=VARCHAR}, #{item.method,jdbcType=VARCHAR},
                #{item.uri,jdbcType=VARCHAR}, #{item.realUri,jdbcType=VARCHAR},
                #{item.requestBody,jdbcType=VARCHAR}, #{item.requestExtra,jdbcType=VARCHAR},
                #{item.responseStatus,jdbcType=INTEGER}, #{item.responseBody,jdbcType=VARCHAR},
                #{item.responseExtra,jdbcType=VARCHAR}, #{item.requestId,jdbcType=VARCHAR},
                #{item.metadata,jdbcType=VARCHAR},
                #{item.jwt,jdbcType=VARCHAR}, #{item.memberId,jdbcType=BIGINT},
                #{item.roleIds,jdbcType=ARRAY,typeHandler=com.blue.lake.repository.type.ClickHouseLongArrayTypeHandler},
                #{item.credentialType,jdbcType=VARCHAR}, #{item.deviceType,jdbcType=VARCHAR},
                #{item.loginTime,jdbcType=BIGINT}, #{item.clientIp,jdbcType=VARCHAR},
                #{item.userAgent,jdbcType=VARCHAR},
                #{item.secKey,jdbcType=VARCHAR}, #{item.requestUnDecryption,jdbcType=INTEGER},
                #{item.responseUnEncryption,jdbcType=INTEGER}, #{item.existenceRequestBody,jdbcType=INTEGER},
                #{item.existenceResponseBody,jdbcType=INTEGER}, #{item.durationSeconds,jdbcType=INTEGER},
                #{item.resourceId,jdbcType=BIGINT}, #{item.service,jdbcType=VARCHAR},
                #{item.relativeUri,jdbcType=VARCHAR}, #{item.absoluteUri,jdbcType=VARCHAR},
                #{item.relationView,jdbcType=VARCHAR}, #{item.authenticate,jdbcType=INTEGER},
                #{item.type,jdbcType=INTEGER}, #{item.name,jdbcType=VARCHAR}
                )
            </foreach>
        </if>
    </insert>

    <insert id="insertSelective" parameterType="com.blue.lake.repository.entity.OptEvent">
        insert into opt_event
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="dataEventType != null">
                data_event_type,
            </if>
            <if test="dataEventOpType != null">
                data_event_op_type,
            </if>
            <if test="stamp != null">
                stamp,
            </if>
            <if test="createDate != null">
                create_date,
            </if>
            <if test="method != null">
                method,
            </if>
            <if test="uri != null">
                uri,
            </if>
            <if test="realUri != null">
                real_uri,
            </if>
            <if test="requestBody != null">
                request_body,
            </if>
            <if test="requestExtra != null">
                request_extra,
            </if>
            <if test="responseStatus != null">
                response_status,
            </if>
            <if test="responseBody != null">
                response_body,
            </if>
            <if test="responseExtra != null">
                response_extra,
            </if>
            <if test="requestId != null">
                request_id,
            </if>
            <if test="metadata != null">
                metadata,
            </if>
            <if test="jwt != null">
                jwt,
            </if>
            <if test="memberId != null">
                member_id,
            </if>
            <if test="roleIds != null">
                role_ids,
            </if>
            <if test="credentialType != null">
                credential_type,
            </if>
            <if test="deviceType != null">
                device_type,
            </if>
            <if test="loginTime != null">
                login_time,
            </if>
            <if test="clientIp != null">
                client_ip,
            </if>
            <if test="userAgent != null">
                user_agent,
            </if>
            <if test="secKey != null">
                sec_key,
            </if>
            <if test="requestUnDecryption != null">
                request_un_decryption,
            </if>
            <if test="responseUnEncryption != null">
                response_un_encryption,
            </if>
            <if test="existenceRequestBody != null">
                existence_request_body,
            </if>
            <if test="existenceResponseBody != null">
                existence_response_body,
            </if>
            <if test="durationSeconds != null">
                duration_seconds,
            </if>
            <if test="resourceId != null">
                resource_id,
            </if>
            <if test="service != null">
                service,
            </if>
            <if test="relativeUri != null">
                relative_uri,
            </if>
            <if test="absoluteUri != null">
                absolute_uri,
            </if>
            <if test="relationView != null">
                relation_view,
            </if>
            <if test="authenticate != null">
                authenticate,
            </if>
            <if test="type != null">
                type,
            </if>
            <if test="name != null">
                name,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            <if test="dataEventType != null">
                #{dataEventType,jdbcType=VARCHAR},
            </if>
            <if test="dataEventOpType != null">
                #{dataEventOpType,jdbcType=VARCHAR},
            </if>
            <if test="stamp != null">
                #{stamp,jdbcType=BIGINT},
            </if>
            <if test="createDate != null">
                #{createDate,jdbcType=VARCHAR},
            </if>
            <if test="method != null">
                #{method,jdbcType=VARCHAR},
            </if>
            <if test="uri != null">
                #{uri,jdbcType=VARCHAR},
            </if>
            <if test="realUri != null">
                #{realUri,jdbcType=VARCHAR},
            </if>
            <if test="requestBody != null">
                #{requestBody,jdbcType=VARCHAR},
            </if>
            <if test="requestExtra != null">
                #{requestExtra,jdbcType=VARCHAR},
            </if>
            <if test="responseStatus != null">
                #{responseStatus,jdbcType=INTEGER},
            </if>
            <if test="responseBody != null">
                #{responseBody,jdbcType=VARCHAR},
            </if>
            <if test="responseExtra != null">
                #{responseExtra,jdbcType=VARCHAR},
            </if>
            <if test="requestId != null">
                #{requestId,jdbcType=VARCHAR},
            </if>
            <if test="metadata != null">
                #{metadata,jdbcType=VARCHAR},
            </if>
            <if test="jwt != null">
                #{jwt,jdbcType=VARCHAR},
            </if>
            <if test="memberId != null">
                #{memberId,jdbcType=BIGINT},
            </if>
            <if test="roleIds != null">
                #{roleIds,jdbcType=ARRAY,typeHandler=com.blue.lake.repository.type.ClickHouseLongArrayTypeHandler},
            </if>
            <if test="credentialType != null">
                #{credentialType,jdbcType=VARCHAR},
            </if>
            <if test="deviceType != null">
                #{deviceType,jdbcType=VARCHAR},
            </if>
            <if test="loginTime != null">
                #{loginTime,jdbcType=BIGINT},
            </if>
            <if test="clientIp != null">
                #{clientIp,jdbcType=VARCHAR},
            </if>
            <if test="userAgent != null">
                #{userAgent,jdbcType=VARCHAR},
            </if>
            <if test="secKey != null">
                #{secKey,jdbcType=VARCHAR},
            </if>
            <if test="requestUnDecryption != null">
                #{requestUnDecryption,jdbcType=INTEGER},
            </if>
            <if test="responseUnEncryption != null">
                #{responseUnEncryption,jdbcType=INTEGER},
            </if>
            <if test="existenceRequestBody != null">
                #{existenceRequestBody,jdbcType=INTEGER},
            </if>
            <if test="existenceResponseBody != null">
                #{existenceResponseBody,jdbcType=INTEGER},
            </if>
            <if test="durationSeconds != null">
                #{durationSeconds,jdbcType=INTEGER},
            </if>
            <if test="resourceId != null">
                #{resourceId,jdbcType=BIGINT},
            </if>
            <if test="service != null">
                #{service,jdbcType=VARCHAR},
            </if>
            <if test="relativeUri != null">
                #{relativeUri,jdbcType=VARCHAR},
            </if>
            <if test="absoluteUri != null">
                #{absoluteUri,jdbcType=VARCHAR},
            </if>
            <if test="relationView != null">
                #{relationView,jdbcType=VARCHAR},
            </if>
            <if test="authenticate != null">
                #{authenticate,jdbcType=INTEGER},
            </if>
            <if test="type != null">
                #{type,jdbcType=INTEGER},
            </if>
            <if test="name != null">
                #{name,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>

    <update id="updateByPrimaryKeySelective" parameterType="com.blue.lake.repository.entity.OptEvent">
        update opt_event
        <set>
            <if test="dataEventType != null">
                data_event_type = #{dataEventType,jdbcType=VARCHAR},
            </if>
            <if test="dataEventOpType != null">
                data_event_op_type = #{dataEventOpType,jdbcType=VARCHAR},
            </if>
            <if test="stamp != null">
                stamp = #{stamp,jdbcType=BIGINT},
            </if>
            <if test="createDate != null">
                create_date = #{createDate,jdbcType=VARCHAR},
            </if>
            <if test="method != null">
                method = #{method,jdbcType=VARCHAR},
            </if>
            <if test="uri != null">
                uri = #{uri,jdbcType=VARCHAR},
            </if>
            <if test="realUri != null">
                real_uri = #{realUri,jdbcType=VARCHAR},
            </if>
            <if test="requestBody != null">
                request_body = #{requestBody,jdbcType=VARCHAR},
            </if>
            <if test="requestExtra != null">
                request_extra = #{requestExtra,jdbcType=VARCHAR},
            </if>
            <if test="responseStatus != null">
                response_status = #{responseStatus,jdbcType=INTEGER},
            </if>
            <if test="responseBody != null">
                response_body = #{responseBody,jdbcType=VARCHAR},
            </if>
            <if test="responseExtra != null">
                response_extra = #{responseExtra,jdbcType=VARCHAR},
            </if>
            <if test="requestId != null">
                request_id = #{requestId,jdbcType=VARCHAR},
            </if>
            <if test="metadata != null">
                metadata = #{metadata,jdbcType=VARCHAR},
            </if>
            <if test="jwt != null">
                jwt = #{jwt,jdbcType=VARCHAR},
            </if>
            <if test="memberId != null">
                member_id = #{memberId,jdbcType=BIGINT},
            </if>
            <if test="roleId != null">
                role_ids =
                #{roleIds,jdbcType=ARRAY,typeHandler=com.blue.lake.repository.type.ClickHouseLongArrayTypeHandler},
            </if>
            <if test="credentialType != null">
                credential_type = #{credentialType,jdbcType=VARCHAR},
            </if>
            <if test="deviceType != null">
                device_type = #{deviceType,jdbcType=VARCHAR},
            </if>
            <if test="loginTime != null">
                login_time = #{loginTime,jdbcType=BIGINT},
            </if>
            <if test="clientIp != null">
                client_ip = #{clientIp,jdbcType=VARCHAR},
            </if>
            <if test="userAgent != null">
                user_agent = #{userAgent,jdbcType=VARCHAR},
            </if>
            <if test="secKey != null">
                sec_key = #{secKey,jdbcType=VARCHAR},
            </if>
            <if test="requestUnDecryption != null">
                request_un_decryption = #{requestUnDecryption,jdbcType=INTEGER},
            </if>
            <if test="responseUnEncryption != null">
                response_un_encryption = #{responseUnEncryption,jdbcType=INTEGER},
            </if>
            <if test="existenceRequestBody != null">
                existence_request_body = #{existenceRequestBody,jdbcType=INTEGER},
            </if>
            <if test="existenceResponseBody != null">
                existence_response_body = #{existenceResponseBody,jdbcType=INTEGER},
            </if>
            <if test="durationSeconds != null">
                duration_seconds = #{durationSeconds,jdbcType=INTEGER},
            </if>
            <if test="resourceId != null">
                resource_id = #{resourceId,jdbcType=BIGINT},
            </if>
            <if test="service != null">
                service = #{service,jdbcType=VARCHAR},
            </if>
            <if test="relativeUri != null">
                relative_uri = #{relativeUri,jdbcType=VARCHAR},
            </if>
            <if test="absoluteUri != null">
                absolute_uri = #{absoluteUri,jdbcType=VARCHAR},
            </if>
            <if test="relationView != null">
                relation_view = #{relationView,jdbcType=VARCHAR},
            </if>
            <if test="authenticate != null">
                authenticate = #{authenticate,jdbcType=INTEGER},
            </if>
            <if test="type != null">
                type = #{type,jdbcType=INTEGER},
            </if>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>

    <update id="updateByPrimaryKey" parameterType="com.blue.lake.repository.entity.OptEvent">
        update opt_event
        set data_event_type         = #{dataEventType,jdbcType=VARCHAR},
            data_event_op_type      = #{dataEventOpType,jdbcType=VARCHAR},
            stamp                   = #{stamp,jdbcType=BIGINT},
            create_date             = #{createDate,jdbcType=VARCHAR},
            method                  = #{method,jdbcType=VARCHAR},
            uri                     = #{uri,jdbcType=VARCHAR},
            real_uri                = #{realUri,jdbcType=VARCHAR},
            request_body            = #{requestBody,jdbcType=VARCHAR},
            request_extra           = #{requestExtra,jdbcType=VARCHAR},
            response_status         = #{responseStatus,jdbcType=INTEGER},
            response_body           = #{responseBody,jdbcType=VARCHAR},
            response_extra          = #{responseExtra,jdbcType=VARCHAR},
            request_id              = #{requestId,jdbcType=VARCHAR},
            metadata                = #{metadata,jdbcType=VARCHAR},
            jwt                     = #{jwt,jdbcType=VARCHAR},
            member_id               = #{memberId,jdbcType=BIGINT},
            role_ids                = #{roleIds,jdbcType=ARRAY,typeHandler=com.blue.lake.repository.type.ClickHouseLongArrayTypeHandler},
            credential_type         = #{credentialType,jdbcType=VARCHAR},
            device_type             = #{deviceType,jdbcType=VARCHAR},
            login_time              = #{loginTime,jdbcType=BIGINT},
            client_ip               = #{clientIp,jdbcType=VARCHAR},
            user_agent              = #{userAgent,jdbcType=VARCHAR},
            sec_key                 = #{secKey,jdbcType=VARCHAR},
            request_un_decryption   = #{requestUnDecryption,jdbcType=INTEGER},
            response_un_encryption  = #{responseUnEncryption,jdbcType=INTEGER},
            existence_request_body  = #{existenceRequestBody,jdbcType=INTEGER},
            existence_response_body = #{existenceResponseBody,jdbcType=INTEGER},
            duration_seconds        = #{durationSeconds,jdbcType=INTEGER},
            resource_id             = #{resourceId,jdbcType=BIGINT},
            service                 = #{service,jdbcType=VARCHAR},
            relative_uri            = #{relativeUri,jdbcType=VARCHAR},
            absolute_uri            = #{absoluteUri,jdbcType=VARCHAR},
            relation_view           = #{relationView,jdbcType=VARCHAR},
            authenticate            = #{authenticate,jdbcType=INTEGER},
            type                    = #{type,jdbcType=INTEGER},
            name                    = #{name,jdbcType=VARCHAR}
        where id = #{id,jdbcType=BIGINT}
    </update>

    <sql id="Opt_Event_Conditions">
        <where>
            <if test="optEventCondition != null and optEventCondition.dataEventType != null and optEventCondition.dataEventType != ''">
                AND
                data_event_type = #{optEventCondition.dataEventType,jdbcType=VARCHAR}
            </if>
            <if test="optEventCondition != null and optEventCondition.dataEventOpType != null and optEventCondition.dataEventOpType != ''">
                AND
                data_event_op_type = #{optEventCondition.dataEventOpType,jdbcType=VARCHAR}
            </if>
            <if test="optEventCondition != null and optEventCondition.stampBegin != null">
                AND
                stamp &gt;= #{optEventCondition.stampBegin,jdbcType=BIGINT}
            </if>
            <if test="optEventCondition != null and optEventCondition.stampBegin != null">
                AND
                stamp &lt;= #{optEventCondition.stampBegin,jdbcType=BIGINT}
            </if>
            <if test="optEventCondition != null and optEventCondition.method != null and optEventCondition.method != ''">
                AND
                method = #{optEventCondition.method,jdbcType=VARCHAR}
            </if>
            <if test="optEventCondition != null and optEventCondition.uri != null and optEventCondition.uri != ''">
                AND
                uri = #{optEventCondition.uri,jdbcType=VARCHAR}
            </if>
            <if test="optEventCondition != null and optEventCondition.realUri != null and optEventCondition.realUri != ''">
                AND
                real_uri = #{optEventCondition.realUri,jdbcType=VARCHAR}
            </if>
            <if test="optEventCondition != null and optEventCondition.responseStatus != null">
                AND
                response_status = #{optEventCondition.responseStatus,jdbcType=INTEGER}
            </if>
            <if test="optEventCondition != null and optEventCondition.memberId != null">
                AND
                member_id = #{optEventCondition.memberId,jdbcType=BIGINT}
            </if>
            <if test="optEventCondition != null and optEventCondition.roleId != null">
                AND
                has(role_ids,#{optEventCondition.roleId,jdbcType=BIGINT})
            </if>
            <if test="optEventCondition != null and optEventCondition.credentialType != null and optEventCondition.credentialType != ''">
                AND
                credential_type = #{optEventCondition.credentialType,jdbcType=VARCHAR}
            </if>
            <if test="optEventCondition != null and optEventCondition.deviceType != null and optEventCondition.deviceType != ''">
                AND
                device_type = #{optEventCondition.deviceType,jdbcType=VARCHAR}
            </if>
            <if test="optEventCondition != null and optEventCondition.loginTimeBegin != null">
                AND
                login_time &gt;= #{optEventCondition.loginTimeBegin,jdbcType=BIGINT}
            </if>
            <if test="optEventCondition != null and optEventCondition.loginTimeEnd != null">
                AND
                login_time &lt;= #{optEventCondition.loginTimeEnd,jdbcType=BIGINT}
            </if>
            <if test="optEventCondition != null and optEventCondition.clientIp != null and optEventCondition.clientIp != ''">
                AND
                client_ip = #{optEventCondition.clientIp,jdbcType=VARCHAR}
            </if>
            <if test="optEventCondition != null and optEventCondition.userAgent != null and optEventCondition.userAgent != ''">
                AND
                user_agent = #{optEventCondition.userAgent,jdbcType=VARCHAR}
            </if>
            <if test="optEventCondition != null and optEventCondition.durationSecondsMin != null">
                AND
                duration_seconds = #{optEventCondition.durationSecondsMin,jdbcType=BIGINT}
            </if>
            <if test="optEventCondition != null and optEventCondition.durationSecondsMax != null">
                AND
                duration_seconds = #{optEventCondition.durationSecondsMax,jdbcType=BIGINT}
            </if>
            <if test="resourceId != null">
                resource_id = #{optEventCondition.resourceId,jdbcType=BIGINT},
            </if>
            <if test="service != null">
                service = #{optEventCondition.service,jdbcType=VARCHAR},
            </if>
            <if test="relativeUri != null">
                relative_uri = #{optEventCondition.relativeUri,jdbcType=VARCHAR},
            </if>
            <if test="absoluteUri != null">
                absolute_uri = #{optEventCondition.absoluteUri,jdbcType=VARCHAR},
            </if>
            <if test="relationView != null">
                relation_view = #{optEventCondition.relationView,jdbcType=VARCHAR},
            </if>
            <if test="authenticate != null">
                authenticate = #{optEventCondition.authenticate,jdbcType=INTEGER},
            </if>
            <if test="type != null">
                type = #{optEventCondition.type,jdbcType=INTEGER},
            </if>
            <if test="column != null and comparison != null and searchAfter != null and searchAfter > 0">
                AND
                ${column} ${comparison} #{searchAfter,jdbcType=BIGINT}
            </if>
        </where>
    </sql>

    <select id="selectBySearchAfterAndCondition" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM
        opt_event
        <include refid="Opt_Event_Conditions"/>
        <if test="optEventCondition != null and optEventCondition.sortAttribute != null and optEventCondition.sortAttribute != '' and optEventCondition.sortType != null and optEventCondition.sortType != ''">
            ORDER BY
            ${optEventCondition.sortAttribute} ${optEventCondition.sortType}
        </if>
        LIMIT #{rows,jdbcType=BIGINT}
    </select>

</mapper>